---

- name: Set web protocol
  set_fact:
    web_protocol: "https"
  when:
    - ingress_tls_secret | length
    - route_tls_secret | length

- name: Set node address for ingress
  set_fact:
    content_origin: "{{ web_protocol }}://{{ hostname }}"
    token_server: "{{ web_protocol }}://{{ hostname }}/token/"
  when:
    - ingress_type|lower == "ingress"
    - hostname is defined

- name: Fail if hostname is not defined when ingress is specified
  fail:
    msg: "The hostname must be specified when using ingress_type {{ ingress_type }}."
  when:
    - ingress_type|lower == "ingress"
    - hostname is not defined

- name: Set node address for route
  set_fact:
    content_origin: "{{ web_protocol }}://{{ route_host }}"
    token_server: "{{ web_protocol }}://{{ route_host }}/token/"
  when:
    - ingress_type|lower == "route"
    - route_host is defined

- name: Fail if route_host is not defined when route is specified
  fail:
    msg: "The route_host must be specified when using ingress_type {{ ingress_type }}."
  when:
    - ingress_type|lower == "route"
    - route_host is not defined

- name: Look up the 1st address of the 1st node
  k8s_info:
    api_version: v1
    kind: Node
  register: k8s_nodes
  when:
    - content_origin is not defined

- name: Set node address
  set_fact:
    content_origin: "http://{{ k8s_nodes.resources[0].status.addresses[0].address }}:24880"
    token_server: "http://{{ k8s_nodes.resources[0].status.addresses[0].address }}:24880/token/"
  when:
    - content_origin is not defined

- name: Set content_origin
  set_fact:
    content_origin_dict: "{'content_origin': '{{ content_origin }}', 'token_server': '{{ token_server }}' }"

- name: DEBUG Show content_origin_dict
  debug:
    msg: "{{ content_origin_dict }}"

- name: merge content_origin with settings
  set_fact:
    default_settings: "{{ default_settings|combine(content_origin_dict) }}"

- name: DEBUG Show content_origin
  debug:
    msg: "{{ default_settings.content_origin }}"
