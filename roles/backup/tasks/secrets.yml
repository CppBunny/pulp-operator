---

- name: Make temp secrets directory
  tempfile:
    prefix: "secrets-"
    state: directory
  register: secrets_dir

- name: Template Pulp object definition
  template:
    src: pulp_object.yaml.j2
    dest: "{{ secrets_dir.path }}/pulp_object.yaml"
    mode: '0600'

- name: Set Pulp object template file as var
  set_fact:
    pulp_object_template: "{{ lookup('file', '{{ secrets_dir.path }}/pulp_object.yaml') }}"

- name: Write pulp object to pvc
  k8s_exec:
    namespace: "{{ meta.namespace }}"
    pod: "{{ meta.name }}-db-management"
    command: >-
      bash -c "echo '{{ pulp_object_template }}' > {{ _backup_dir }}/pulp_object.yaml"

- name: Get admin_password
  k8s_info:
    kind: Secret
    namespace: '{{ meta.namespace }}'
    name: '{{ pulp_admin_password_secret }}'
  register: _admin_password

- name: Set admin_password
  set_fact:
    admin_password: "{{ _admin_password['resources'][0]['data']['password'] | b64decode }}"

- name: Template admin_password definition
  template:
    src: admin_password_secret.yaml.j2
    dest: "{{ secrets_dir.path }}/admin_password_secret.yaml"
    mode: '0600'

- name: Set admin_password template
  set_fact:
    admin_password_template: "{{ lookup('file', '{{ secrets_dir.path }}/admin_password_secret.yaml') }}"

- name: Write admin password secret to pvc
  k8s_exec:
    namespace: "{{ meta.namespace }}"
    pod: "{{ meta.name }}-db-management"
    command: >-
      bash -c "echo '{{ admin_password_template }}' > {{ _backup_dir }}/admin_password_secret.yaml"

- name: Get postgres configuration
  k8s_info:
    kind: Secret
    namespace: '{{ meta.namespace }}'
    name: '{{ postgres_configuration_secret }}'
  register: _postgres_configuration

- name: Set postgres configuration
  set_fact:
    database_password: "{{ _postgres_configuration['resources'][0]['data']['password'] | b64decode }}"
    database_username: "{{ _postgres_configuration['resources'][0]['data']['username'] | b64decode }}"
    database_name: "{{ _postgres_configuration['resources'][0]['data']['database'] | b64decode }}"
    database_port: "{{ _postgres_configuration['resources'][0]['data']['port'] | b64decode }}"
    database_host: "{{ _postgres_configuration['resources'][0]['data']['host'] | b64decode }}"

- name: Set postgres db type
  set_fact:
    database_type: "{{ _postgres_configuration['resources'][0]['data']['type'] | b64decode }}"
  when:
    - _postgres_configuration['resources'][0]['data']['type'] is defined
    - _postgres_configuration['resources'][0]['data']['type'] | length

- name: Template postgres configuration definition
  template:
    src: postgres_secret.yaml.j2
    dest: "{{ secrets_dir.path }}/postgres_secret.yaml"
    mode: '0600'

- name: Set postgres configuration
  set_fact:
    postgres_secret_template: "{{ lookup('file', '{{ secrets_dir.path }}/postgres_secret.yaml') }}"

- name: Write postgres secret to pvc
  k8s_exec:
    namespace: "{{ meta.namespace }}"
    pod: "{{ meta.name }}-db-management"
    command: >-
      bash -c "echo '{{ postgres_secret_template }}' > {{ _backup_dir }}/postgres_secret.yaml"

- name: Get objectstorage configuration
  k8s_info:
    kind: Secret
    namespace: '{{ meta.namespace }}'
    name: '{{ pulp_storage_secret }}'
  register: _objectstorage_configuration
  when: pulp_storage_secret is defined

- name: Set s3 common configuration values
  set_fact:
    s3_data_obj: "{{ _objectstorage_configuration['resources'][0]['data'] }}"
    s3_access_key_id: "{{ _objectstorage_configuration['resources'][0]['data']['s3-access-key-id'] | b64decode }}"
    s3_secret_access_key: "{{ _objectstorage_configuration['resources'][0]['data']['s3-secret-access-key'] | b64decode }}"
    s3_bucket_name: "{{ _objectstorage_configuration['resources'][0]['data']['s3-bucket-name'] | b64decode }}"
  when:
    - pulp_storage_secret is defined
    - pulp_storage_type | lower == 's3'

- name: Set s3 region value if found
  set_fact:
    s3_region: "{{ s3_data_obj['s3-region'] | b64decode }}"
  when:
    - pulp_storage_secret is defined
    - pulp_storage_type | lower == 's3'
    - s3_data_obj['s3-region'] is defined
    - s3_data_obj['s3-region'] | length

- name: Set s3 endpoint value if found
  set_fact:
    s3_endpoint: "{{ s3_data_obj['s3-endpoint'] | b64decode }}"
  when:
    - pulp_storage_secret is defined
    - pulp_storage_type | lower == 's3'
    - s3_data_obj['s3-endpoint'] is defined
    - s3_data_obj['s3-endpoint'] | length

- name: Template s3 configuration definition
  template:
    src: s3_secret.yaml.j2
    dest: "{{ secrets_dir.path }}/objectstorage_secret.yaml"
    mode: '0600'
  when:
    - pulp_storage_secret is defined
    - pulp_storage_type | lower == 's3'

- name: Set s3 configuration
  set_fact:
    s3_secret_template: "{{ lookup('file', '{{ secrets_dir.path }}/objectstorage_secret.yaml') }}"
  when:
    - pulp_storage_secret is defined
    - pulp_storage_type | lower == 's3'

- name: Write s3 secret to pvc
  k8s_exec:
    namespace: "{{ meta.namespace }}"
    pod: "{{ meta.name }}-db-management"
    command: >-
      bash -c "echo '{{ s3_secret_template }}' > {{ _backup_dir }}/objectstorage_secret.yaml"
  when:
    - pulp_storage_secret is defined
    - pulp_storage_type | lower == 's3'

- name: Set azure common configuration values
  set_fact:
    azure_data_obj: "{{ _objectstorage_configuration['resources'][0]['data'] }}"
    azure_account_name: "{{ _objectstorage_configuration['resources'][0]['data']['azure-account-name] | b64decode }}"
    azure-account-key: "{{ _objectstorage_configuration['resources'][0]['data']['azure-account-key'] | b64decode }}"
    azure-container: "{{ _objectstorage_configuration['resources'][0]['data']['azure-container'] | b64decode }}"
  when:
    - pulp_storage_secret is defined
    - pulp_storage_type | lower == 'azure'

- name: Set azure container path value if found
  set_fact:
    azure_container_path: "{{ azure_data_obj['azure-container-path'] | b64decode }}"
  when:
    - pulp_storage_secret is defined
    - pulp_storage_type | lower == 'azure'
    - azure_data_obj['azure-container-path'] is defined
    - azure_data_obj['azure-container-path'] | length

- name: Template azure configuration definition
  template:
    src: azure_secret.yaml.j2
    dest: "{{ secrets_dir.path }}/objectstorage_secret.yaml"
    mode: '0600'
  when:
    - pulp_storage_secret is defined
    - pulp_storage_type | lower == 'azure'

- name: Set azure configuration
  set_fact:
    azure_secret_template: "{{ lookup('file', '{{ secrets_dir.path }}/objectstorage_secret.yaml') }}"
  when:
    - pulp_storage_secret is defined
    - pulp_storage_type | lower == 'azure'

- name: Write azure secret to pvc
  k8s_exec:
    namespace: "{{ meta.namespace }}"
    pod: "{{ meta.name }}-db-management"
    command: >-
      bash -c "echo '{{ azure_secret_template }}' > {{ _backup_dir }}/objectstorage_secret.yaml"
  when:
    - pulp_storage_secret is defined
    - pulp_storage_type | lower == 'azure'
